Index: leave_management/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/leave_management/admin.py b/leave_management/admin.py
--- a/leave_management/admin.py	
+++ b/leave_management/admin.py	
@@ -1,0 +1,7 @@
+from django.contrib import admin
+from .models import PendingRequest, Leave, RejectedLeave, CanceledLeave
+
+admin.site.register(PendingRequest)
+admin.site.register(Leave)
+admin.site.register(RejectedLeave)
+admin.site.register(CanceledLeave)
Index: leave_management/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    path('apply_leave_request/', views.apply_leave_request, name='apply_leave_request'),\r\n    path('employee_leave_page/', views.employee_leave_page, name='employee_leave_page'),\r\n    path('hr_manager_leave_management/', views.hr_leave_management, name='hr_manager_leave_management'),\r\n    # Add other URLs as needed\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/leave_management/urls.py b/leave_management/urls.py
--- a/leave_management/urls.py	
+++ b/leave_management/urls.py	
@@ -2,8 +2,8 @@
 from . import views
 
 urlpatterns = [
-    path('apply_leave_request/', views.apply_leave_request, name='apply_leave_request'),
-    path('employee_leave_page/', views.employee_leave_page, name='employee_leave_page'),
-    path('hr_manager_leave_management/', views.hr_leave_management, name='hr_manager_leave_management'),
-    # Add other URLs as needed
-]
\ No newline at end of file
+    path('employee/leave/', views.EmployeeLeaveView.as_view(), name='employee_leave'),
+    path('employee/apply-leave/', views.ApplyLeaveView.as_view(), name='apply_leave'),
+    path('hr/leave-management/', views.HRManagerLeaveManagementView.as_view(), name='hr_manager_leave_management'),
+    path('leave/update/<int:pk>/', views.UpdateLeaveStatusView.as_view(), name='update_leave_status'),
+]
Index: leave_management/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\r\nfrom django.utils import timezone\r\nfrom .models import Employee, PendingLeaveRequest, AcceptedLeave, RejectedLeave, CanceledLeave\r\n\r\n# Helper function to create tables if they do not exist\r\nfrom django.db import connection\r\n\r\ndef create_tables():\r\n    with connection.cursor() as cursor:\r\n        cursor.execute(\"\"\"\r\n            CREATE TABLE IF NOT EXISTS pending_leave_request (\r\n                id SERIAL PRIMARY KEY,\r\n                employee_id VARCHAR(10),\r\n                start_date DATE,\r\n                end_date DATE,\r\n                reason TEXT\r\n            );\r\n        \"\"\")\r\n        cursor.execute(\"\"\"\r\n            CREATE TABLE IF NOT EXISTS accepted_leave (\r\n                id SERIAL PRIMARY KEY,\r\n                employee_id VARCHAR(10),\r\n                start_date DATE,\r\n                end_date DATE,\r\n                reason TEXT,\r\n                hr_comment TEXT\r\n            );\r\n        \"\"\")\r\n        cursor.execute(\"\"\"\r\n            CREATE TABLE IF NOT EXISTS rejected_leave (\r\n                id SERIAL PRIMARY KEY,\r\n                employee_id VARCHAR(10),\r\n                start_date DATE,\r\n                end_date DATE,\r\n                reason TEXT,\r\n                hr_comment TEXT\r\n            );\r\n        \"\"\")\r\n        cursor.execute(\"\"\"\r\n            CREATE TABLE IF NOT EXISTS canceled_leave (\r\n                id SERIAL PRIMARY KEY,\r\n                employee_id VARCHAR(10),\r\n                start_date DATE,\r\n                end_date DATE,\r\n                reason TEXT,\r\n                hr_comment TEXT\r\n            );\r\n        \"\"\")\r\n\r\ncreate_tables()  # Ensure tables are created at server startup\r\n\r\ndef apply_leave_request(request):\r\n    employee = Employee.objects.get(emp_no=request.user.username)  # Assuming employee is logged in using emp_no\r\n\r\n    if request.method == 'POST':\r\n        start_date = request.POST.get('start_date')\r\n        end_date = request.POST.get('end_date')\r\n        reason = request.POST.get('reason')\r\n\r\n        pending_leave = PendingLeaveRequest.objects.create(\r\n            employee=employee,\r\n            start_date=start_date,\r\n            end_date=end_date,\r\n            reason=reason\r\n        )\r\n\r\n        return redirect('employee_leave_page')\r\n\r\n    context = {\r\n        'employee': employee,\r\n    }\r\n    return render(request, 'apply_leave_request.html', context)\r\n\r\ndef employee_leave_page(request):\r\n    employee = Employee.objects.get(emp_no=request.user.username)  # Assuming employee is logged in using emp_no\r\n\r\n    # Fetch leave requests based on status\r\n    pending_leave_requests = PendingLeaveRequest.objects.filter(employee=employee)\r\n    accepted_leaves = AcceptedLeave.objects.filter(employee=employee)\r\n    rejected_leaves = RejectedLeave.objects.filter(employee=employee)\r\n    canceled_leaves = CanceledLeave.objects.filter(employee=employee)\r\n\r\n    if request.method == 'POST':\r\n        leave_id = request.POST.get('leave_id')\r\n        leave_status = request.POST.get('leave_status')\r\n\r\n        if leave_status == 'accepted':\r\n            leave = PendingLeaveRequest.objects.get(id=leave_id)\r\n            AcceptedLeave.objects.create(\r\n                employee=leave.employee,\r\n                start_date=leave.start_date,\r\n                end_date=leave.end_date,\r\n                reason=leave.reason\r\n            )\r\n            leave.delete()\r\n\r\n        elif leave_status == 'rejected':\r\n            leave = PendingLeaveRequest.objects.get(id=leave_id)\r\n            RejectedLeave.objects.create(\r\n                employee=leave.employee,\r\n                start_date=leave.start_date,\r\n                end_date=leave.end_date,\r\n                reason=leave.reason\r\n            )\r\n            leave.delete()\r\n\r\n        elif leave_status == 'canceled':\r\n            leave = PendingLeaveRequest.objects.get(id=leave_id)\r\n            CanceledLeave.objects.create(\r\n                employee=leave.employee,\r\n                start_date=leave.start_date,\r\n                end_date=leave.end_date,\r\n                reason=leave.reason\r\n            )\r\n            leave.delete()\r\n\r\n        return redirect('employee_leave_page')\r\n\r\n    context = {\r\n        'employee': employee,\r\n        'pending_leave_requests': pending_leave_requests,\r\n        'accepted_leaves': accepted_leaves,\r\n        'rejected_leaves': rejected_leaves,\r\n        'canceled_leaves': canceled_leaves,\r\n    }\r\n    return render(request, 'employee_leave_page.html', context)\r\n\r\ndef hr_leave_management(request):\r\n    new_leave_requests = PendingLeaveRequest.objects.all()\r\n    todays_leaves = AcceptedLeave.objects.filter(start_date=timezone.now().date())\r\n\r\n    # Apply filters if provided\r\n    start_date = request.GET.get('start_date')\r\n    end_date = request.GET.get('end_date')\r\n    employee_id = request.GET.get('employee_id')\r\n    leave_type = request.GET.get('leave_type')\r\n\r\n    filtered_leaves = PendingLeaveRequest.objects.all()\r\n    if start_date and end_date:\r\n        filtered_leaves = filtered_leaves.filter(start_date__gte=start_date, end_date__lte=end_date)\r\n    if employee_id:\r\n        filtered_leaves = filtered_leaves.filter(employee__emp_no=employee_id)\r\n    if leave_type:\r\n        filtered_leaves = filtered_leaves.filter(status=leave_type)\r\n\r\n    context = {\r\n        'new_leave_requests_count': new_leave_requests.count(),\r\n        'todays_leaves_count': todays_leaves.count(),\r\n        'new_leave_requests': new_leave_requests,\r\n        'filtered_leaves': filtered_leaves,\r\n        'start_date': start_date,\r\n        'end_date': end_date,\r\n        'employee_id': employee_id,\r\n    }\r\n    return render(request, 'hr_leave_management.html', context)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/leave_management/views.py b/leave_management/views.py
--- a/leave_management/views.py	
+++ b/leave_management/views.py	
@@ -1,155 +1,168 @@
-from django.shortcuts import render, redirect
-from django.utils import timezone
-from .models import Employee, PendingLeaveRequest, AcceptedLeave, RejectedLeave, CanceledLeave
-
-# Helper function to create tables if they do not exist
-from django.db import connection
-
-def create_tables():
-    with connection.cursor() as cursor:
-        cursor.execute("""
-            CREATE TABLE IF NOT EXISTS pending_leave_request (
-                id SERIAL PRIMARY KEY,
-                employee_id VARCHAR(10),
-                start_date DATE,
-                end_date DATE,
-                reason TEXT
-            );
-        """)
-        cursor.execute("""
-            CREATE TABLE IF NOT EXISTS accepted_leave (
-                id SERIAL PRIMARY KEY,
-                employee_id VARCHAR(10),
-                start_date DATE,
-                end_date DATE,
-                reason TEXT,
-                hr_comment TEXT
-            );
-        """)
-        cursor.execute("""
-            CREATE TABLE IF NOT EXISTS rejected_leave (
-                id SERIAL PRIMARY KEY,
-                employee_id VARCHAR(10),
-                start_date DATE,
-                end_date DATE,
-                reason TEXT,
-                hr_comment TEXT
-            );
-        """)
-        cursor.execute("""
-            CREATE TABLE IF NOT EXISTS canceled_leave (
-                id SERIAL PRIMARY KEY,
-                employee_id VARCHAR(10),
-                start_date DATE,
-                end_date DATE,
-                reason TEXT,
-                hr_comment TEXT
-            );
-        """)
-
-create_tables()  # Ensure tables are created at server startup
-
-def apply_leave_request(request):
-    employee = Employee.objects.get(emp_no=request.user.username)  # Assuming employee is logged in using emp_no
-
-    if request.method == 'POST':
-        start_date = request.POST.get('start_date')
-        end_date = request.POST.get('end_date')
-        reason = request.POST.get('reason')
-
-        pending_leave = PendingLeaveRequest.objects.create(
-            employee=employee,
-            start_date=start_date,
-            end_date=end_date,
-            reason=reason
-        )
-
-        return redirect('employee_leave_page')
+from django.shortcuts import render, get_object_or_404, redirect
+from django.views import View
+from django.utils.dateparse import parse_date
+from datetime import date
+from .models import PendingRequest, Leave, RejectedLeave, CanceledLeave
+from .forms import LeaveRequestForm, LeaveStatusForm
+from employee_profile.models import EmployeeProfile
 
-    context = {
-        'employee': employee,
-    }
-    return render(request, 'apply_leave_request.html', context)
+def employee_profile_view(request):
+    employees = EmployeeProfile.objects.all()
+    return render(request, 'employee_profile.html', {'employees': employees})
 
-def employee_leave_page(request):
-    employee = Employee.objects.get(emp_no=request.user.username)  # Assuming employee is logged in using emp_no
-
-    # Fetch leave requests based on status
-    pending_leave_requests = PendingLeaveRequest.objects.filter(employee=employee)
-    accepted_leaves = AcceptedLeave.objects.filter(employee=employee)
-    rejected_leaves = RejectedLeave.objects.filter(employee=employee)
-    canceled_leaves = CanceledLeave.objects.filter(employee=employee)
+class EmployeeLeaveView(View):
+    def get(self, request):
+        employee = EmployeeProfile.objects.get(email=request.user.email)
+        pending_request = PendingRequest.objects.filter(employee=employee).first()
+        leaves = Leave.objects.filter(employee=employee)
+        rejected_leaves = RejectedLeave.objects.filter(employee=employee)
+        canceled_leaves = CanceledLeave.objects.filter(employee=employee)
 
-    if request.method == 'POST':
-        leave_id = request.POST.get('leave_id')
-        leave_status = request.POST.get('leave_status')
-
-        if leave_status == 'accepted':
-            leave = PendingLeaveRequest.objects.get(id=leave_id)
-            AcceptedLeave.objects.create(
-                employee=leave.employee,
-                start_date=leave.start_date,
-                end_date=leave.end_date,
-                reason=leave.reason
-            )
-            leave.delete()
+        start_date = request.GET.get('start_date')
+        end_date = request.GET.get('end_date')
+        leave_type = request.GET.get('leave_type')
 
-        elif leave_status == 'rejected':
-            leave = PendingLeaveRequest.objects.get(id=leave_id)
-            RejectedLeave.objects.create(
-                employee=leave.employee,
-                start_date=leave.start_date,
-                end_date=leave.end_date,
-                reason=leave.reason
-            )
-            leave.delete()
-
-        elif leave_status == 'canceled':
-            leave = PendingLeaveRequest.objects.get(id=leave_id)
-            CanceledLeave.objects.create(
-                employee=leave.employee,
-                start_date=leave.start_date,
-                end_date=leave.end_date,
-                reason=leave.reason
-            )
-            leave.delete()
-
-        return redirect('employee_leave_page')
+        if start_date:
+            leaves = leaves.filter(start_date__gte=parse_date(start_date))
+            rejected_leaves = rejected_leaves.filter(start_date__gte=parse_date(start_date))
+            canceled_leaves = canceled_leaves.filter(start_date__gte=parse_date(start_date))
+        if end_date:
+            leaves = leaves.filter(end_date__lte=parse_date(end_date))
+            rejected_leaves = rejected_leaves.filter(end_date__lte=parse_date(end_date))
+            canceled_leaves = canceled_leaves.filter(end_date__lte=parse_date(end_date))
+        if leave_type:
+            if leave_type == 'accepted':
+                rejected_leaves = []
+                canceled_leaves = []
+            elif leave_type == 'rejected':
+                leaves = []
+                canceled_leaves = []
+            elif leave_type == 'canceled':
+                leaves = []
+                rejected_leaves = []
 
-    context = {
-        'employee': employee,
-        'pending_leave_requests': pending_leave_requests,
-        'accepted_leaves': accepted_leaves,
-        'rejected_leaves': rejected_leaves,
-        'canceled_leaves': canceled_leaves,
-    }
-    return render(request, 'employee_leave_page.html', context)
+        context = {
+            'employee': employee,
+            'pending_request': pending_request,
+            'leaves': leaves,
+            'rejected_leaves': rejected_leaves,
+            'canceled_leaves': canceled_leaves
+        }
+        return render(request, 'employee_leave_page.html', context)
 
-def hr_leave_management(request):
-    new_leave_requests = PendingLeaveRequest.objects.all()
-    todays_leaves = AcceptedLeave.objects.filter(start_date=timezone.now().date())
+    def post(self, request):
+        form = LeaveRequestForm(request.POST)
+        if form.is_valid():
+            leave_request = form.save(commit=False)
+            leave_request.employee = EmployeeProfile.objects.get(email=request.user.email)
+            leave_request.save()
+            return redirect('employee_leave')
+        else:
+            return self.get(request)
+
+class ApplyLeaveView(View):
+    def get(self, request):
+        employee = EmployeeProfile.objects.get(email=request.user.email)
+        form = LeaveRequestForm()
+        context = {'employee': employee, 'form': form}
+        return render(request, 'apply_leave_request.html', context)
 
-    # Apply filters if provided
-    start_date = request.GET.get('start_date')
-    end_date = request.GET.get('end_date')
-    employee_id = request.GET.get('employee_id')
-    leave_type = request.GET.get('leave_type')
+    def post(self, request):
+        form = LeaveRequestForm(request.POST)
+        if form.is_valid():
+            leave_request = form.save(commit=False)
+            leave_request.employee = EmployeeProfile.objects.get(email=request.user.email)
+            leave_request.save()
+            return redirect('employee_leave')
+        else:
+            return self.get(request)
+
+class HRManagerLeaveManagementView(View):
+    def get(self, request):
+        new_leave_requests_count = PendingRequest.objects.count()
+        today_leaves_count = Leave.objects.filter(start_date=date.today()).count()
+        pending_requests = PendingRequest.objects.all()
+
+        start_date = request.GET.get('start_date')
+        end_date = request.GET.get('end_date')
+        leave_type = request.GET.get('leave_type')
+        employee_id = request.GET.get('employee_id')
 
-    filtered_leaves = PendingLeaveRequest.objects.all()
-    if start_date and end_date:
-        filtered_leaves = filtered_leaves.filter(start_date__gte=start_date, end_date__lte=end_date)
-    if employee_id:
-        filtered_leaves = filtered_leaves.filter(employee__emp_no=employee_id)
-    if leave_type:
-        filtered_leaves = filtered_leaves.filter(status=leave_type)
+        if employee_id:
+            employee = EmployeeProfile.objects.filter(emp_no=employee_id).first()
+            if employee:
+                pending_requests = pending_requests.filter(employee=employee)
+                leaves = Leave.objects.filter(employee=employee)
+                rejected_leaves = RejectedLeave.objects.filter(employee=employee)
+                canceled_leaves = CanceledLeave.objects.filter(employee=employee)
+            else:
+                leaves = Leave.objects.none()
+                rejected_leaves = RejectedLeave.objects.none()
+                canceled_leaves = CanceledLeave.objects.none()
+        else:
+            leaves = Leave.objects.all()
+            rejected_leaves = RejectedLeave.objects.all()
+            canceled_leaves = CanceledLeave.objects.all()
+
+        if start_date:
+            leaves = leaves.filter(start_date__gte=parse_date(start_date))
+            rejected_leaves = rejected_leaves.filter(start_date__gte=parse_date(start_date))
+            canceled_leaves = canceled_leaves.filter(start_date__gte=parse_date(start_date))
+        if end_date:
+            leaves = leaves.filter(end_date__lte=parse_date(end_date))
+            rejected_leaves = rejected_leaves.filter(end_date__lte=parse_date(end_date))
+            canceled_leaves = canceled_leaves.filter(end_date__lte=parse_date(end_date))
+        if leave_type:
+            if leave_type == 'accepted':
+                rejected_leaves = []
+                canceled_leaves = []
+            elif leave_type == 'rejected':
+                leaves = []
+                canceled_leaves = []
+            elif leave_type == 'canceled':
+                leaves = []
+                rejected_leaves = []
 
-    context = {
-        'new_leave_requests_count': new_leave_requests.count(),
-        'todays_leaves_count': todays_leaves.count(),
-        'new_leave_requests': new_leave_requests,
-        'filtered_leaves': filtered_leaves,
-        'start_date': start_date,
-        'end_date': end_date,
-        'employee_id': employee_id,
-    }
-    return render(request, 'hr_leave_management.html', context)
+        context = {
+            'new_leave_requests_count': new_leave_requests_count,
+            'today_leaves_count': today_leaves_count,
+            'pending_requests': pending_requests,
+            'leaves': leaves,
+            'rejected_leaves': rejected_leaves,
+            'canceled_leaves': canceled_leaves,
+        }
+        return render(request, 'hr_manager_leave_management.html', context)
+
+class UpdateLeaveStatusView(View):
+    def post(self, request, pk):
+        pending_request = get_object_or_404(PendingRequest, pk=pk)
+        form = LeaveStatusForm(request.POST)
+        if form.is_valid():
+            status = form.cleaned_data['status']
+            comment = form.cleaned_data['comment']
+            if status == 'accept':
+                Leave.objects.create(
+                    employee=pending_request.employee,
+                    start_date=pending_request.start_date,
+                    end_date=pending_request.end_date,
+                    reason=pending_request.reason,
+                    comment=comment
+                )
+            elif status == 'reject':
+                RejectedLeave.objects.create(
+                    employee=pending_request.employee,
+                    start_date=pending_request.start_date,
+                    end_date=pending_request.end_date,
+                    reason=pending_request.reason,
+                    comment=comment
+                )
+            elif status == 'cancel':
+                CanceledLeave.objects.create(
+                    employee=pending_request.employee,
+                    start_date=pending_request.start_date,
+                    end_date=pending_request.end_date,
+                    reason=pending_request.reason,
+                    comment=comment
+                )
+            pending_request.delete()
+        return redirect('hr_manager_leave_management')
